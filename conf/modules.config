/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/intermediate/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    //
    // Intermediate output file Config
    //

    withName: 'NFCORE_PHOENIX:PHOENIX:ALIGNMENT:FASTQ_ALIGN_BWA:BWA_MEM' {
        ext.prefix = { "${meta.id}.aln.sorted" }
    }

    withName: 'NFCORE_PHOENIX:PHOENIX:RESOLVE_PDX:.*' {
        publishDir = [
            path: { "${params.outdir}/intermediate/resolve_pdx/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
    }

   withName: 'NFCORE_PHOENIX:PHOENIX:ALIGNMENT:PICARD_MERGESAMFILES' {
        ext.prefix = { "${meta.id}.merged" }
   }

   withName: 'NFCORE_PHOENIX:PHOENIX:RESOLVE_PDX:ALIGNMENT_HUMAN:FASTQ_ALIGN_BWA:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.disambiguate_a.sort" }
   }

   withName: 'NFCORE_PHOENIX:PHOENIX:RESOLVE_PDX:ALIGNMENT_MOUSE:FASTQ_ALIGN_BWA:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.disambiguate_b.sort" }
   }

    withName: 'NFCORE_PHOENIX:PHOENIX:RESOLVE_PDX:ALIGNMENT_HUMAN:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.disambiguate_a.md" }
    }

    withName: 'NFCORE_PHOENIX:PHOENIX:RESOLVE_PDX:ALIGNMENT_MOUSE:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.disambiguate_b.md" }
    }

    //
    // Expected final output files
    //

    withName: 'NFCORE_PHOENIX:PHOENIX:ALIGNMENT:BAM_MARKDUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.prefix = { "${meta.id}.md" }
        publishDir = [
            path: { "${params.outdir}/bam/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.bam'
        ]
    }

    withName: 'NFCORE_PHOENIX:PHOENIX:RESOLVE_PDX:NGS_DISAMBIGUATE' {
        publishDir = [
            path: { "${params.outdir}/bam" },
            mode: params.publish_dir_mode,
            pattern: '*/*disambiguatedSpeciesA.bam'
        ]
    }

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMPLESHEET_CHECK_BAM {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir =[
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode
        ]
    }

    withName: MULTIQC {
        publishDir =[
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
